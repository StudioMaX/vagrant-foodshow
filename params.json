{"name":"Vagrant-foodshow","tagline":"Vagrant plugin for ngrok","body":"# Foodshow: Share your [Vagrant](http://vagrantup.com) virtual machine\r\n\r\n[![Code Climate](https://codeclimate.com/github/express42/vagrant-foodshow.png)](https://codeclimate.com/github/express42/vagrant-foodshow)\r\n\r\nVagrant-Foodshow plugin allows you to share tcp ports of your virtual machine via the Internet.\r\n\r\nWith this plugin you may show your web application to your colleague, present new feature for your customer and give ssh access to your ops guy.\r\n\r\nAll tunneling job performed by [Ngrok](http://ngrok.com) backend.\r\nNgrok tunnel can operate in TCP and HTTP modes. In HTTP tunnel mode `ngrok` provides access to HTTP requests and response from server to help you analyze the traffic. In TCP mode you can tunnel any binary protocol like `ssh`, `postgresql` or whatever you want, but there is no introspection in TCP tunnel.\r\n\r\n## Installation\r\n\r\n### Ngrok installation\r\n\r\nYou should go to [ngrok.com](http://ngrok.com) and download ngrok binary for your system. By default vagrant-foodshow will search ngrok binary at `~/bin/ngrok`. You must place binary into *bin* directory in your home folder. To change default location you must set `foodshow.ngrok_bin` option (See [Advanced tunnel example](#advanced-tunnel-example)).\r\n\r\n### Plugin installation\r\n\r\nTo install this plugin just execute:\r\n\r\n```bash\r\nvagrant plugin install vagrant-foodshow\r\n```\r\n\r\n## Usage&Configuration\r\n\r\nFirst of all you should enable plugin in your `Vagrantfile`:\r\n```ruby\r\nconfig.foodshow.enabled = true\r\n```\r\n\r\n### There are two ways to create a tunnel\r\n\r\n##### Call method `foodshow.tunnel` :\r\n\r\n```ruby\r\n...\r\nconfig.foodshow.tunnel <host_port>, <protocol>, [options hash]\r\n...\r\n```\r\n\r\n##### Add `ngrok_proto` parameter to `vm.network` :\r\n\r\n```ruby\r\n...\r\nconfig.vm.network :forwarded_port, guest: <guest_port>, host: <host_port>, ngrok_proto: \"<protocol>\"\r\n...\r\n```\r\n\r\nDefault tunnel protocol is `http+https`. Ngrok supports `http`, `https`, `http+https` and `tcp`. For tcp protocol authtoken is required.\r\n\r\n### Simple tunnel example\r\n\r\n```ruby\r\nVagrant.configure(\"2\") do |config|\r\n  #Enable foodshow\r\n  config.foodshow.enabled = true\r\n  ...\r\n  # Define vm\r\n  config.vm.define :web01 do |conf|\r\n    ...\r\n    #Just add ngrok_proto parameter to your port forwarding entry\r\n    conf.vm.network :forwarded_port, guest: 80, host: 8080, ngrok_proto: \"http+https\"\r\n    ...\r\n    end\r\nend\r\n```\r\n\r\n### Advanced tunnel example\r\n\r\n```ruby\r\nVagrant.configure(\"2\") do |config|\r\n  #Enable foodshow\r\n  config.foodshow.enabled = true\r\n  # Change ngrok binary location\r\n  config.foodshow.ngrok_bin = \"/usr/local/bin/ngrok\"\r\n  # Automaticly search ssh port and create tcp tunnel\r\n  config.foodshow.forward_ssh = true\r\n  ...\r\n  # Define vms\r\n  config.vm.define :web01 do |conf|\r\n    ...\r\n    conf.vm.network :forwarded_port, guest: 80, host: 8080, ngrok_proto: \"http+https\"\r\n    # Don't tunnel ssh for this vm\r\n    config.foodshow.forward_ssh = false\r\n    # For this vm we use another token\r\n    conf.foodshow.authtoken = <sometoken_2>\r\n    ...\r\n  end\r\n  config.vm.define :web02 do |conf|\r\n    ...\r\n    conf.vm.network :forwarded_port, guest: 80, host: 8081\r\n    conf.vm.network :forwarded_port, guest: 389, host: 3389\r\n    # You may pass some params as tunnel options\r\n    # This code creates a tunnel http://mycopmanyllc.ngrok.com with basic auth\r\n    conf.foodshow.tunnel 8081, \"http\", :httpauth => \"foodshow:ngrok\" :subdomain => \"mycopmanyllc\"\r\n    # And sure you may tunnel any tcp port\r\n    conf.foodshow.tunnel 3389, \"tcp\"\r\n    ...\r\n  end\r\nend\r\n```\r\n### Options\r\n\r\n- Scope *config* means that this option can be set only via `foodshow.<options>`\r\n- Scope *config+tunnel* means that this option can be set via `foodshow.<options>` and can be can be passed to the `foodshow.tunnel` method as options hash.\r\n- Scope *tunnel* means that this option can be passed to the `foodshow.tunnel` method\r\n\r\nOption | Default | Scope | Purpose\r\n-------|---------|---------|--------\r\n`enabled` | `false` |  config | Enable foodshow plugin\r\n`ngrok_bin` | `~/bin/ngrok` | config+tunnel |  Ngrok binary location (you should put a binary file at this location)\r\n`forward_ssh` | `false` | config | Automatically search and forward vagrant ssh guest port (authtoken required)\r\n`timeout` | `10` | config | Max waiting time for establishing tunnel\r\n`authtoken` | `nil` | config+tunnel | Auth token. Required for TCP tunnels and some functions (Go to [ngrok.com](http://ngrok.com) to get authkey)\r\n`httpauth` | `nil` | config+tunnel | You may set basic auth for http/https tunnel. Format: `user:password`\r\n`subdomain` | `nil` | config+tunnel | Custom subdomain for http/https tunnel. URL will be like a http://\\<subdomain\\>.ngrok.com\r\n`hostname` | `nil` | config+tunnel | Custom domain for http/https tunnel (Paid feature, see [Pricing & Features](http://ngrok.com/features) on ngrok website )\r\n`host_ip` | `127.0.0.1` | tunnel | Custom destination ip for tunnel\r\n`inspect_addr` | `127.0.0.1` | config | Address for traffic inspection\r\n`inspect_pbase` | `4040` | config | Base port for traffic inspection, other ngrok  processes will use the next available port\r\n\r\n# Authors\r\n\r\n* Nikita Borzykh (<sample.n@gmail.com>)\r\n\r\n## Contributing\r\n\r\n1. Fork it ( http://github.com/express42/vagrant-foodshow/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}